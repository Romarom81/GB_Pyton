# Основные принципы работы с csv файлами :

# Файл CSV – это особый вид файла, который позволяет структурировать большие объемы данных.
# По сути, он является обычным текстовым файлом, 
# однако каждый новый элемент отделен от предыдущего запятой или другим разделителем. 
# Обычно каждая запись начинается с новой строки. 
# Данные CSV можно легко экспортировать в электронные таблицы или базы данных. 
# Программист может расширять CSV файл, добавляя новые строки.

# ! Важно помнить, что CSV – это обычный текстовый файл, 
# который не поддерживает символы в кодировках, отличающихся от ASCII или Unicode.

# ЧТЕНИЕ ФАЙЛОВ

# Библиотека csv является встроенной, поэтому её не нужно скачивать, 
# достаточно использовать обычный импорт: import csv
# Для того чтобы прочитать данные из файла, программист должен создать объект reader:
# reader_object = csv.reader(file, delimiter = ",")
# reader имеет метод __next__(), 
# то есть является итерируемым объектом, поэтому чтение из файла происходит следующим образом:
# _______________________________________________________________________________________________
# import csv
# with open("classmates.csv", encoding='utf-8') as r_file:
#     file_reader = csv.reader(r_file, delimiter = ",") # Создаем объект reader, указываем символ-разделитель ","
#     count = 0                                         # Счетчик для подсчета количества строк и вывода заголовков столбцов
#     for row in file_reader:                           # Считывание данных из CSV файла
#         if count == 0:
#             print(f'Файл содержит столбцы: {", ".join(row)}') # Вывод строки, содержащей заголовки для столбцов
#         else:
#             print(f'    {row[0]} - {row[1]} и он родился в {row[2]} году.') # Вывод строк остальных
#         count += 1
#     print(f'Всего в файле {count} строк.') # вывод общего кол-ва строк в файле
# _________________________________________________________________________________________________

# Библиотека CSV позволяет работать с файлами, как со словарями, 
# для этого нужно создать объект DictReader. 
# Обращаться к элементам можно по имени столбцов, а не с помощью индексов. 
# Для того, чтобы исходная программа делала аналогичный вывод, её следует изменить следующим образом:
# _________________________________________________________________________________________________
# import csv
# with open("classmates.csv", encoding='utf-8') as r_file:
#     # Создаем объект DictReader, указываем символ-разделитель ","
#     file_reader = csv.DictReader(r_file, delimiter = ",")
#     # Счетчик для подсчета количества строк и вывода заголовков столбцов
#     count = 0
#     # Считывание данных из CSV файла
#     for row in file_reader:
#         if count == 0:
#             # Вывод строки, содержащей заголовки для столбцов
#             print(f'Файл содержит столбцы: {", ".join(row)}')
#         # Вывод строк
#         print(f' {row["Имя"]} - {row["Успеваемость"]}', end='')
#         print(f' и он родился в {row["Год рождения"]} году.')
#         count += 1
#     print(f'Всего в файле {count + 1} строк.')

# ______________________________________________________________________________________________

# DictReader имеет параметры:
# dialect — Набор параметров для форматирования информации. Подробнее про них ниже.
# line_num — Устанавливает количество строк, которое может быть прочитано.
# fieldnames — Определяет заголовки для столбцов, если не определить атрибут, 
# то в него запишутся элементы из первой прочитанной строки файла. Заголовки нужны для того, 
# чтобы легко было понять, какая информация содержится или должна содержаться в столбце.
# 
# Например, если бы в classmates.csv не было бы первой строки с заголовками, 
# то можно было бы его открыть следующим образом:
# ______________________________________________________
# fieldnames = ['Имя', 'Успеваемость', 'Год рождения']
# file_reader = csv.DictReader(r_file, fieldnames = fieldnames)
# ____________________________________________________________
# Также можно использовать метод __next__() для получения следующей строки.
#  Этот метод делает объект reader итерируемым. 
# То есть он вызывается при каждой итерации и возвращает следующую строку. 
# Этот метод и используется при каждой итерации в цикле for для получения очередной строки.

# ЗАПИСЬ В ФАЙЛЫ

# Для записи информации в CSV файл необходимо создать объект writer:
# _________________________________________________
# file_writer = csv.writer(w_file, delimiter = "\t")
# ___________________________________________________________

# Для записи в файл данных используется метод writerow(), который имеет следующий синтаксис:
# writecol("Имя", "Фамилия", "Отчество")
# Код программы выглядит так:
# _____________________________________________________________________________________________

# import csv
# with open("classmates.csv", mode="w", encoding='utf-8') as w_file:
#     file_writer = csv.writer(w_file, delimiter = ",", lineterminator="\r")
#     file_writer.writerow(["Имя", "Класс", "Возраст"])
#     file_writer.writerow(["Женя", "3", "10"])
#     file_writer.writerow(["Саша", "5", "12"])
#     file_writer.writerow(["Маша", "11", "18"])
# _______________________________________________________________________________________________

# Обратите внимание, что при записи использовался, lineterminator="\r". 
# Это разделитель между строками таблицы, по умолчанию он "\r\n".

# Запись в файл также может быть осуществлена с помощью объекта DictWriter. 
# Важно помнить, что он требует явного указания параметра fieldnames. 
# В качестве аргумента метода writerow используется словарь.
# Код программы выглядит так:
# _________________________________________________________________________________________
# import csv
# with open("classmates.csv", mode="w", encoding='utf-8') as w_file:
#     names = ["Имя", "Возраст"]
#     file_writer = csv.DictWriter(w_file, delimiter = ",", lineterminator="\r", fieldnames=names)
#     file_writer.writeheader()
#     file_writer.writerow({"Имя": "Саша", "Возраст": "6"})
#     file_writer.writerow({"Имя": "Маша", "Возраст": "15"})
#     file_writer.writerow({"Имя": "Вова", "Возраст": "14"})

# __________________________________________________________________________________________

# Кроме того, writer имеет методы:

# writerows(rows) — Записывает все элементы строк.
# writeheader() — Выводит заголовки для столбцов. Заголовки должны быть переданы объекту writer в виде списка, как атрибут fieldnames.
# writeheader был использован в предыдущем примере. Рассмотрим применение writerows:

# file_writer.writerows([{"Имя": "Саша", "Возраст": "6"},
#     {"Имя": "Маша", "Возраст": "15"},
#     {"Имя": "Вова", "Возраст": "14"}])

